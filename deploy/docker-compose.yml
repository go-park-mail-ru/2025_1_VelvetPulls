version: '3.8'

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - ../db/migrations:/docker-entrypoint-initdb.d
    env_file:
      - ../.env
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      start_period: 3s
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    env_file:
      - ../.env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--bind", "0.0.0.0", "--protected-mode", "yes"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping"]
      start_period: 3s
      interval: 1s
      timeout: 3s
      retries: 30

  nats:
    image: nats:2.10.16-alpine3.19
    command: ["nats-server", "-config", "/etc/nats/nats-server.conf"]
    volumes:
      - ./nats-server.conf:/etc/nats/nats-server.conf:ro
    ports:
      - "4222:4222"
      - "8222:8222"
    healthcheck:
      test: wget http://localhost:8222/healthz -q -S -O -
      start_period: 3s
      retries: 3
      timeout: 3s
      interval: 14s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - app
      - auth
      - search
      - websocket
      - node-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  app:
    build:
      context: ../
      dockerfile: ./deploy/docker/main.Dockerfile
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  auth:
    build:
      context: ../
      dockerfile: ./deploy/docker/auth.Dockerfile
    ports:
      - "8081:8081"
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: unless-stopped

  search:
    build:
      context: ../
      dockerfile: ./deploy/docker/search.Dockerfile
    ports:
      - "8083:8083"
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  websocket:
    build:
      context: ../
      dockerfile: ./deploy/docker/websocket.Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - ../.env
    depends_on:
      nats:
        condition: service_healthy
    restart: unless-stopped

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:v1.8.1
    restart: unless-stopped
    ports:
      - "8012:9100"