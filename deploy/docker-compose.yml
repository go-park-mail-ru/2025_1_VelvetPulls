services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - ../db/migrations:/docker-entrypoint-initdb.d
    env_file:
      - ../.env
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      start_period: 3s
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    env_file:
      - ../.env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping"]
      start_period: 3s
      interval: 1s
      timeout: 3s
      retries: 30

  nats:
    image: nats:2.10.16-alpine3.19
    command: -m 8222
    healthcheck:
      test: wget http://localhost:8222/healthz -q -S -O -
      start_period: 3s
      retries: 3
      timeout: 3s
      interval: 14s

  app:
    build:
      context: ../
      dockerfile: ./deploy/main.Dockerfile
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  auth:
    build:
      context: ../
      dockerfile: ./deploy/auth.Dockerfile
    ports:
      - "8081:8081"
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: unless-stopped

  websocket:
    build:
      context: ../
      dockerfile: ./deploy/websocket.Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - ../.env
    depends_on:
      nats:
        condition: service_healthy
    restart: unless-stopped