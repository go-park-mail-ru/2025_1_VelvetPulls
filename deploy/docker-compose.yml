services:

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - ../db/migrations:/docker-entrypoint-initdb.d
    env_file:
      - ../.env
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DATABASE_USER} -d $${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    ports:
      - "${REDIS_PORT}:${DATABASE_PORT}"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    env_file:
      - ../.env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  nats:
    image: nats:latest
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - ./nats-server.conf:/nats-server.conf
    command: ["-c", "/nats-server.conf"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/healthz"]

    
  app:
    build:
      context: ../
      dockerfile: ./deploy/Dockerfile
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: unless-stopped