// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: services/csat_service/delivery/proto/csat.proto

package csatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CsatService_GetQuestions_FullMethodName    = "/csat.CsatService/GetQuestions"
	CsatService_CreateAnswer_FullMethodName    = "/csat.CsatService/CreateAnswer"
	CsatService_GetStatistics_FullMethodName   = "/csat.CsatService/GetStatistics"
	CsatService_GetUserActivity_FullMethodName = "/csat.CsatService/GetUserActivity"
)

// CsatServiceClient is the client API for CsatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CsatServiceClient interface {
	GetQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	GetUserActivity(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*GetUserActivityResponse, error)
}

type csatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCsatServiceClient(cc grpc.ClientConnInterface) CsatServiceClient {
	return &csatServiceClient{cc}
}

func (c *csatServiceClient) GetQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, CsatService_GetQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csatServiceClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CsatService_CreateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csatServiceClient) GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, CsatService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csatServiceClient) GetUserActivity(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*GetUserActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActivityResponse)
	err := c.cc.Invoke(ctx, CsatService_GetUserActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CsatServiceServer is the server API for CsatService service.
// All implementations must embed UnimplementedCsatServiceServer
// for forward compatibility.
type CsatServiceServer interface {
	GetQuestions(context.Context, *emptypb.Empty) (*GetQuestionsResponse, error)
	CreateAnswer(context.Context, *CreateAnswerRequest) (*emptypb.Empty, error)
	GetStatistics(context.Context, *emptypb.Empty) (*GetStatisticsResponse, error)
	GetUserActivity(context.Context, *GetUserActivityRequest) (*GetUserActivityResponse, error)
	mustEmbedUnimplementedCsatServiceServer()
}

// UnimplementedCsatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCsatServiceServer struct{}

func (UnimplementedCsatServiceServer) GetQuestions(context.Context, *emptypb.Empty) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedCsatServiceServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedCsatServiceServer) GetStatistics(context.Context, *emptypb.Empty) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedCsatServiceServer) GetUserActivity(context.Context, *GetUserActivityRequest) (*GetUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivity not implemented")
}
func (UnimplementedCsatServiceServer) mustEmbedUnimplementedCsatServiceServer() {}
func (UnimplementedCsatServiceServer) testEmbeddedByValue()                     {}

// UnsafeCsatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CsatServiceServer will
// result in compilation errors.
type UnsafeCsatServiceServer interface {
	mustEmbedUnimplementedCsatServiceServer()
}

func RegisterCsatServiceServer(s grpc.ServiceRegistrar, srv CsatServiceServer) {
	// If the following call pancis, it indicates UnimplementedCsatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CsatService_ServiceDesc, srv)
}

func _CsatService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsatService_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServiceServer).GetQuestions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsatService_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServiceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsatService_CreateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServiceServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsatService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsatService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServiceServer).GetStatistics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsatService_GetUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServiceServer).GetUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsatService_GetUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServiceServer).GetUserActivity(ctx, req.(*GetUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CsatService_ServiceDesc is the grpc.ServiceDesc for CsatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CsatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "csat.CsatService",
	HandlerType: (*CsatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _CsatService_GetQuestions_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _CsatService_CreateAnswer_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _CsatService_GetStatistics_Handler,
		},
		{
			MethodName: "GetUserActivity",
			Handler:    _CsatService_GetUserActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/csat_service/delivery/proto/csat.proto",
}
