// Code generated by MockGen. DO NOT EDIT.
// Source: services/auth_service/internal/usecase/auth.go
//
// Generated by this command:
//
//	mockgen -source=services/auth_service/internal/usecase/auth.go -destination=services/auth_service/tests/mock_auth_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/services/auth_service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthUsecase is a mock of IAuthUsecase interface.
type MockIAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUsecaseMockRecorder
	isgomock struct{}
}

// MockIAuthUsecaseMockRecorder is the mock recorder for MockIAuthUsecase.
type MockIAuthUsecaseMockRecorder struct {
	mock *MockIAuthUsecase
}

// NewMockIAuthUsecase creates a new mock instance.
func NewMockIAuthUsecase(ctrl *gomock.Controller) *MockIAuthUsecase {
	mock := &MockIAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockIAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUsecase) EXPECT() *MockIAuthUsecaseMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockIAuthUsecase) LoginUser(ctx context.Context, values model.LoginCredentials) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, values)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIAuthUsecaseMockRecorder) LoginUser(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIAuthUsecase)(nil).LoginUser), ctx, values)
}

// LogoutUser mocks base method.
func (m *MockIAuthUsecase) LogoutUser(ctx context.Context, sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockIAuthUsecaseMockRecorder) LogoutUser(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockIAuthUsecase)(nil).LogoutUser), ctx, sessionId)
}

// RegisterUser mocks base method.
func (m *MockIAuthUsecase) RegisterUser(ctx context.Context, values model.RegisterCredentials) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, values)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIAuthUsecaseMockRecorder) RegisterUser(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIAuthUsecase)(nil).RegisterUser), ctx, values)
}
