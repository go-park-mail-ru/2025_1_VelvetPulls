// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/message.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/message.go -destination=tests/mock_message_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIMessageRepo is a mock of IMessageRepo interface.
type MockIMessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageRepoMockRecorder
	isgomock struct{}
}

// MockIMessageRepoMockRecorder is the mock recorder for MockIMessageRepo.
type MockIMessageRepoMockRecorder struct {
	mock *MockIMessageRepo
}

// NewMockIMessageRepo creates a new mock instance.
func NewMockIMessageRepo(ctrl *gomock.Controller) *MockIMessageRepo {
	mock := &MockIMessageRepo{ctrl: ctrl}
	mock.recorder = &MockIMessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageRepo) EXPECT() *MockIMessageRepoMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockIMessageRepo) CreateMessage(ctx context.Context, message *model.Message) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, message)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockIMessageRepoMockRecorder) CreateMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockIMessageRepo)(nil).CreateMessage), ctx, message)
}

// DeleteMessage mocks base method.
func (m *MockIMessageRepo) DeleteMessage(ctx context.Context, messageID uuid.UUID) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, messageID)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockIMessageRepoMockRecorder) DeleteMessage(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockIMessageRepo)(nil).DeleteMessage), ctx, messageID)
}

// GetMessage mocks base method.
func (m *MockIMessageRepo) GetMessage(ctx context.Context, id uuid.UUID) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, id)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockIMessageRepoMockRecorder) GetMessage(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockIMessageRepo)(nil).GetMessage), ctx, id)
}

// GetMessages mocks base method.
func (m *MockIMessageRepo) GetMessages(ctx context.Context, chatID uuid.UUID) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, chatID)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockIMessageRepoMockRecorder) GetMessages(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockIMessageRepo)(nil).GetMessages), ctx, chatID)
}

// UpdateMessage mocks base method.
func (m *MockIMessageRepo) UpdateMessage(ctx context.Context, messageID uuid.UUID, newBody string) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, messageID, newBody)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockIMessageRepoMockRecorder) UpdateMessage(ctx, messageID, newBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockIMessageRepo)(nil).UpdateMessage), ctx, messageID, newBody)
}
