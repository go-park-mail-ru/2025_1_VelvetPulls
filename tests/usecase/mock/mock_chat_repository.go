// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/chat.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/chat.go -destination=tests/mock_chat_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIChatRepo is a mock of IChatRepo interface.
type MockIChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIChatRepoMockRecorder
	isgomock struct{}
}

// MockIChatRepoMockRecorder is the mock recorder for MockIChatRepo.
type MockIChatRepoMockRecorder struct {
	mock *MockIChatRepo
}

// NewMockIChatRepo creates a new mock instance.
func NewMockIChatRepo(ctrl *gomock.Controller) *MockIChatRepo {
	mock := &MockIChatRepo{ctrl: ctrl}
	mock.recorder = &MockIChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatRepo) EXPECT() *MockIChatRepoMockRecorder {
	return m.recorder
}

// AddUserToChatByID mocks base method.
func (m *MockIChatRepo) AddUserToChatByID(ctx context.Context, userID uuid.UUID, userRole string, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChatByID", ctx, userID, userRole, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChatByID indicates an expected call of AddUserToChatByID.
func (mr *MockIChatRepoMockRecorder) AddUserToChatByID(ctx, userID, userRole, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChatByID", reflect.TypeOf((*MockIChatRepo)(nil).AddUserToChatByID), ctx, userID, userRole, chatID)
}

// AddUserToChatByUsername mocks base method.
func (m *MockIChatRepo) AddUserToChatByUsername(ctx context.Context, username, userRole string, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChatByUsername", ctx, username, userRole, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChatByUsername indicates an expected call of AddUserToChatByUsername.
func (mr *MockIChatRepoMockRecorder) AddUserToChatByUsername(ctx, username, userRole, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChatByUsername", reflect.TypeOf((*MockIChatRepo)(nil).AddUserToChatByUsername), ctx, username, userRole, chatID)
}

// CreateChat mocks base method.
func (m *MockIChatRepo) CreateChat(ctx context.Context, create *model.CreateChat) (uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, create)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockIChatRepoMockRecorder) CreateChat(ctx, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockIChatRepo)(nil).CreateChat), ctx, create)
}

// DeleteChat mocks base method.
func (m *MockIChatRepo) DeleteChat(ctx context.Context, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockIChatRepoMockRecorder) DeleteChat(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockIChatRepo)(nil).DeleteChat), ctx, chatID)
}

// GetChatByID mocks base method.
func (m *MockIChatRepo) GetChatByID(ctx context.Context, chatID uuid.UUID) (*model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatByID", ctx, chatID)
	ret0, _ := ret[0].(*model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByID indicates an expected call of GetChatByID.
func (mr *MockIChatRepoMockRecorder) GetChatByID(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByID", reflect.TypeOf((*MockIChatRepo)(nil).GetChatByID), ctx, chatID)
}

// GetChats mocks base method.
func (m *MockIChatRepo) GetChats(ctx context.Context, userID uuid.UUID) ([]model.Chat, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats", ctx, userID)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChats indicates an expected call of GetChats.
func (mr *MockIChatRepoMockRecorder) GetChats(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockIChatRepo)(nil).GetChats), ctx, userID)
}

// GetUserRoleInChat mocks base method.
func (m *MockIChatRepo) GetUserRoleInChat(ctx context.Context, userID, chatID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleInChat", ctx, userID, chatID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleInChat indicates an expected call of GetUserRoleInChat.
func (mr *MockIChatRepoMockRecorder) GetUserRoleInChat(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleInChat", reflect.TypeOf((*MockIChatRepo)(nil).GetUserRoleInChat), ctx, userID, chatID)
}

// GetUsersFromChat mocks base method.
func (m *MockIChatRepo) GetUsersFromChat(ctx context.Context, chatId uuid.UUID) ([]model.UserInChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFromChat", ctx, chatId)
	ret0, _ := ret[0].([]model.UserInChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFromChat indicates an expected call of GetUsersFromChat.
func (mr *MockIChatRepoMockRecorder) GetUsersFromChat(ctx, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFromChat", reflect.TypeOf((*MockIChatRepo)(nil).GetUsersFromChat), ctx, chatId)
}

// RemoveUserFromChatByID mocks base method.
func (m *MockIChatRepo) RemoveUserFromChatByID(ctx context.Context, userID, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChatByID", ctx, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromChatByID indicates an expected call of RemoveUserFromChatByID.
func (mr *MockIChatRepoMockRecorder) RemoveUserFromChatByID(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChatByID", reflect.TypeOf((*MockIChatRepo)(nil).RemoveUserFromChatByID), ctx, userID, chatID)
}

// RemoveUserFromChatByUsername mocks base method.
func (m *MockIChatRepo) RemoveUserFromChatByUsername(ctx context.Context, username string, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChatByUsername", ctx, username, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromChatByUsername indicates an expected call of RemoveUserFromChatByUsername.
func (mr *MockIChatRepoMockRecorder) RemoveUserFromChatByUsername(ctx, username, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChatByUsername", reflect.TypeOf((*MockIChatRepo)(nil).RemoveUserFromChatByUsername), ctx, username, chatID)
}

// UpdateChat mocks base method.
func (m *MockIChatRepo) UpdateChat(ctx context.Context, update *model.UpdateChat) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", ctx, update)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockIChatRepoMockRecorder) UpdateChat(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockIChatRepo)(nil).UpdateChat), ctx, update)
}
