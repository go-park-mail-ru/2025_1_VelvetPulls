// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/contact.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/contact.go -destination=./tests/mock/mock_contact_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIContactRepo is a mock of IContactRepo interface.
type MockIContactRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIContactRepoMockRecorder
	isgomock struct{}
}

// MockIContactRepoMockRecorder is the mock recorder for MockIContactRepo.
type MockIContactRepoMockRecorder struct {
	mock *MockIContactRepo
}

// NewMockIContactRepo creates a new mock instance.
func NewMockIContactRepo(ctrl *gomock.Controller) *MockIContactRepo {
	mock := &MockIContactRepo{ctrl: ctrl}
	mock.recorder = &MockIContactRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactRepo) EXPECT() *MockIContactRepoMockRecorder {
	return m.recorder
}

// AddContactByUsername mocks base method.
func (m *MockIContactRepo) AddContactByUsername(ctx context.Context, userID uuid.UUID, contactUsername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContactByUsername", ctx, userID, contactUsername)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContactByUsername indicates an expected call of AddContactByUsername.
func (mr *MockIContactRepoMockRecorder) AddContactByUsername(ctx, userID, contactUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContactByUsername", reflect.TypeOf((*MockIContactRepo)(nil).AddContactByUsername), ctx, userID, contactUsername)
}

// DeleteContactByUsername mocks base method.
func (m *MockIContactRepo) DeleteContactByUsername(ctx context.Context, userID uuid.UUID, contactUsername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactByUsername", ctx, userID, contactUsername)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContactByUsername indicates an expected call of DeleteContactByUsername.
func (mr *MockIContactRepoMockRecorder) DeleteContactByUsername(ctx, userID, contactUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactByUsername", reflect.TypeOf((*MockIContactRepo)(nil).DeleteContactByUsername), ctx, userID, contactUsername)
}

// GetContacts mocks base method.
func (m *MockIContactRepo) GetContacts(ctx context.Context, userID uuid.UUID) ([]model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, userID)
	ret0, _ := ret[0].([]model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockIContactRepoMockRecorder) GetContacts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockIContactRepo)(nil).GetContacts), ctx, userID)
}
