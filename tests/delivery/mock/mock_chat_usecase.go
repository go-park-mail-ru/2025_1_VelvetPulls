// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/chat.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/chat.go -destination=./tests/delivery/mock/mock_chat_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIChatUsecase is a mock of IChatUsecase interface.
type MockIChatUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIChatUsecaseMockRecorder
	isgomock struct{}
}

// MockIChatUsecaseMockRecorder is the mock recorder for MockIChatUsecase.
type MockIChatUsecaseMockRecorder struct {
	mock *MockIChatUsecase
}

// NewMockIChatUsecase creates a new mock instance.
func NewMockIChatUsecase(ctrl *gomock.Controller) *MockIChatUsecase {
	mock := &MockIChatUsecase{ctrl: ctrl}
	mock.recorder = &MockIChatUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatUsecase) EXPECT() *MockIChatUsecaseMockRecorder {
	return m.recorder
}

// AddUsersIntoChat mocks base method.
func (m *MockIChatUsecase) AddUsersIntoChat(ctx context.Context, userID uuid.UUID, usernames []string, chatID uuid.UUID) (*model.AddedUsersIntoChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsersIntoChat", ctx, userID, usernames, chatID)
	ret0, _ := ret[0].(*model.AddedUsersIntoChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUsersIntoChat indicates an expected call of AddUsersIntoChat.
func (mr *MockIChatUsecaseMockRecorder) AddUsersIntoChat(ctx, userID, usernames, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersIntoChat", reflect.TypeOf((*MockIChatUsecase)(nil).AddUsersIntoChat), ctx, userID, usernames, chatID)
}

// CreateChat mocks base method.
func (m *MockIChatUsecase) CreateChat(ctx context.Context, userID uuid.UUID, chat *model.CreateChat) (*model.ChatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, userID, chat)
	ret0, _ := ret[0].(*model.ChatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockIChatUsecaseMockRecorder) CreateChat(ctx, userID, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockIChatUsecase)(nil).CreateChat), ctx, userID, chat)
}

// DeleteChat mocks base method.
func (m *MockIChatUsecase) DeleteChat(ctx context.Context, userID, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockIChatUsecaseMockRecorder) DeleteChat(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockIChatUsecase)(nil).DeleteChat), ctx, userID, chatID)
}

// DeleteUserFromChat mocks base method.
func (m *MockIChatUsecase) DeleteUserFromChat(ctx context.Context, userID uuid.UUID, usernamesDelete []string, chatID uuid.UUID) (*model.DeletedUsersFromChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromChat", ctx, userID, usernamesDelete, chatID)
	ret0, _ := ret[0].(*model.DeletedUsersFromChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFromChat indicates an expected call of DeleteUserFromChat.
func (mr *MockIChatUsecaseMockRecorder) DeleteUserFromChat(ctx, userID, usernamesDelete, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromChat", reflect.TypeOf((*MockIChatUsecase)(nil).DeleteUserFromChat), ctx, userID, usernamesDelete, chatID)
}

// GetChatInfo mocks base method.
func (m *MockIChatUsecase) GetChatInfo(ctx context.Context, userID, chatID uuid.UUID) (*model.ChatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatInfo", ctx, userID, chatID)
	ret0, _ := ret[0].(*model.ChatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatInfo indicates an expected call of GetChatInfo.
func (mr *MockIChatUsecaseMockRecorder) GetChatInfo(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatInfo", reflect.TypeOf((*MockIChatUsecase)(nil).GetChatInfo), ctx, userID, chatID)
}

// GetChats mocks base method.
func (m *MockIChatUsecase) GetChats(ctx context.Context, userID uuid.UUID) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats", ctx, userID)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChats indicates an expected call of GetChats.
func (mr *MockIChatUsecaseMockRecorder) GetChats(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockIChatUsecase)(nil).GetChats), ctx, userID)
}

// UpdateChat mocks base method.
func (m *MockIChatUsecase) UpdateChat(ctx context.Context, userID uuid.UUID, chat *model.UpdateChat) (*model.ChatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", ctx, userID, chat)
	ret0, _ := ret[0].(*model.ChatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockIChatUsecaseMockRecorder) UpdateChat(ctx, userID, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockIChatUsecase)(nil).UpdateChat), ctx, userID, chat)
}
