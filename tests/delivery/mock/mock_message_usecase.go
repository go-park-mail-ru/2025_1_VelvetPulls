// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/message.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/message.go -destination=tests/delivery/mock/mock_message_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIMessageUsecase is a mock of IMessageUsecase interface.
type MockIMessageUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageUsecaseMockRecorder
	isgomock struct{}
}

// MockIMessageUsecaseMockRecorder is the mock recorder for MockIMessageUsecase.
type MockIMessageUsecaseMockRecorder struct {
	mock *MockIMessageUsecase
}

// NewMockIMessageUsecase creates a new mock instance.
func NewMockIMessageUsecase(ctrl *gomock.Controller) *MockIMessageUsecase {
	mock := &MockIMessageUsecase{ctrl: ctrl}
	mock.recorder = &MockIMessageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageUsecase) EXPECT() *MockIMessageUsecaseMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockIMessageUsecase) DeleteMessage(ctx context.Context, messageID, userID, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, messageID, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockIMessageUsecaseMockRecorder) DeleteMessage(ctx, messageID, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockIMessageUsecase)(nil).DeleteMessage), ctx, messageID, userID, chatID)
}

// GetChatMessages mocks base method.
func (m *MockIMessageUsecase) GetChatMessages(ctx context.Context, userID, chatID uuid.UUID) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", ctx, userID, chatID)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockIMessageUsecaseMockRecorder) GetChatMessages(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockIMessageUsecase)(nil).GetChatMessages), ctx, userID, chatID)
}

// SendMessage mocks base method.
func (m *MockIMessageUsecase) SendMessage(ctx context.Context, input *model.MessageInput, userID, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, input, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIMessageUsecaseMockRecorder) SendMessage(ctx, input, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIMessageUsecase)(nil).SendMessage), ctx, input, userID, chatID)
}

// UpdateMessage mocks base method.
func (m *MockIMessageUsecase) UpdateMessage(ctx context.Context, messageID uuid.UUID, input *model.MessageInput, userID, chatID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, messageID, input, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockIMessageUsecaseMockRecorder) UpdateMessage(ctx, messageID, input, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockIMessageUsecase)(nil).UpdateMessage), ctx, messageID, input, userID, chatID)
}
