// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/profile.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/profile.go -destination=./tests/delivery/mock/mock_profile_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserUsecase is a mock of IUserUsecase interface.
type MockIUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUsecaseMockRecorder
	isgomock struct{}
}

// MockIUserUsecaseMockRecorder is the mock recorder for MockIUserUsecase.
type MockIUserUsecaseMockRecorder struct {
	mock *MockIUserUsecase
}

// NewMockIUserUsecase creates a new mock instance.
func NewMockIUserUsecase(ctrl *gomock.Controller) *MockIUserUsecase {
	mock := &MockIUserUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUsecase) EXPECT() *MockIUserUsecaseMockRecorder {
	return m.recorder
}

// GetUserProfileByID mocks base method.
func (m *MockIUserUsecase) GetUserProfileByID(ctx context.Context, id uuid.UUID) (*model.GetUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileByID", ctx, id)
	ret0, _ := ret[0].(*model.GetUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileByID indicates an expected call of GetUserProfileByID.
func (mr *MockIUserUsecaseMockRecorder) GetUserProfileByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileByID", reflect.TypeOf((*MockIUserUsecase)(nil).GetUserProfileByID), ctx, id)
}

// GetUserProfileByUsername mocks base method.
func (m *MockIUserUsecase) GetUserProfileByUsername(ctx context.Context, username string) (*model.GetUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileByUsername", ctx, username)
	ret0, _ := ret[0].(*model.GetUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileByUsername indicates an expected call of GetUserProfileByUsername.
func (mr *MockIUserUsecaseMockRecorder) GetUserProfileByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileByUsername", reflect.TypeOf((*MockIUserUsecase)(nil).GetUserProfileByUsername), ctx, username)
}

// UpdateUserProfile mocks base method.
func (m *MockIUserUsecase) UpdateUserProfile(ctx context.Context, profile *model.UpdateUserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockIUserUsecaseMockRecorder) UpdateUserProfile(ctx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockIUserUsecase)(nil).UpdateUserProfile), ctx, profile)
}
