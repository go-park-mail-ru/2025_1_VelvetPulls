// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/contact.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/contact.go -destination=./tests/delivery/mock/mock_contact_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIContactUsecase is a mock of IContactUsecase interface.
type MockIContactUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIContactUsecaseMockRecorder
	isgomock struct{}
}

// MockIContactUsecaseMockRecorder is the mock recorder for MockIContactUsecase.
type MockIContactUsecaseMockRecorder struct {
	mock *MockIContactUsecase
}

// NewMockIContactUsecase creates a new mock instance.
func NewMockIContactUsecase(ctrl *gomock.Controller) *MockIContactUsecase {
	mock := &MockIContactUsecase{ctrl: ctrl}
	mock.recorder = &MockIContactUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactUsecase) EXPECT() *MockIContactUsecaseMockRecorder {
	return m.recorder
}

// AddUserContact mocks base method.
func (m *MockIContactUsecase) AddUserContact(ctx context.Context, userID uuid.UUID, contactUsername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserContact", ctx, userID, contactUsername)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserContact indicates an expected call of AddUserContact.
func (mr *MockIContactUsecaseMockRecorder) AddUserContact(ctx, userID, contactUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserContact", reflect.TypeOf((*MockIContactUsecase)(nil).AddUserContact), ctx, userID, contactUsername)
}

// GetUserContacts mocks base method.
func (m *MockIContactUsecase) GetUserContacts(ctx context.Context, userID uuid.UUID) ([]model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserContacts", ctx, userID)
	ret0, _ := ret[0].([]model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContacts indicates an expected call of GetUserContacts.
func (mr *MockIContactUsecaseMockRecorder) GetUserContacts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContacts", reflect.TypeOf((*MockIContactUsecase)(nil).GetUserContacts), ctx, userID)
}

// RemoveUserContact mocks base method.
func (m *MockIContactUsecase) RemoveUserContact(ctx context.Context, userID uuid.UUID, contactUsername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserContact", ctx, userID, contactUsername)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserContact indicates an expected call of RemoveUserContact.
func (mr *MockIContactUsecaseMockRecorder) RemoveUserContact(ctx, userID, contactUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserContact", reflect.TypeOf((*MockIContactUsecase)(nil).RemoveUserContact), ctx, userID, contactUsername)
}
