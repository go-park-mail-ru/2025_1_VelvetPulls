// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/session.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/session.go -destination=./tests/delivery/mock/mock_session_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockISessionUsecase is a mock of ISessionUsecase interface.
type MockISessionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISessionUsecaseMockRecorder
	isgomock struct{}
}

// MockISessionUsecaseMockRecorder is the mock recorder for MockISessionUsecase.
type MockISessionUsecaseMockRecorder struct {
	mock *MockISessionUsecase
}

// NewMockISessionUsecase creates a new mock instance.
func NewMockISessionUsecase(ctrl *gomock.Controller) *MockISessionUsecase {
	mock := &MockISessionUsecase{ctrl: ctrl}
	mock.recorder = &MockISessionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionUsecase) EXPECT() *MockISessionUsecaseMockRecorder {
	return m.recorder
}

// CheckLogin mocks base method.
func (m *MockISessionUsecase) CheckLogin(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockISessionUsecaseMockRecorder) CheckLogin(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockISessionUsecase)(nil).CheckLogin), ctx, token)
}
