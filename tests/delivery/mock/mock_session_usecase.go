// Code generated by MockGen. DO NOT EDIT.
// Source: services/auth_service/proto/auth_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=services/auth_service/proto/auth_grpc.pb.go -destination=tests/delivery/mock/mock_session_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authpb "github.com/go-park-mail-ru/2025_1_VelvetPulls/services/auth_service/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
	isgomock struct{}
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockAuthServiceClient) LoginUser(ctx context.Context, in *authpb.LoginUserRequest, opts ...grpc.CallOption) (*authpb.LoginUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginUser", varargs...)
	ret0, _ := ret[0].(*authpb.LoginUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthServiceClientMockRecorder) LoginUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthServiceClient)(nil).LoginUser), varargs...)
}

// LogoutUser mocks base method.
func (m *MockAuthServiceClient) LogoutUser(ctx context.Context, in *authpb.LogoutUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogoutUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockAuthServiceClientMockRecorder) LogoutUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAuthServiceClient)(nil).LogoutUser), varargs...)
}

// RegisterUser mocks base method.
func (m *MockAuthServiceClient) RegisterUser(ctx context.Context, in *authpb.RegisterUserRequest, opts ...grpc.CallOption) (*authpb.RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUser", varargs...)
	ret0, _ := ret[0].(*authpb.RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthServiceClientMockRecorder) RegisterUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthServiceClient)(nil).RegisterUser), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
	isgomock struct{}
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockAuthServiceServer) LoginUser(arg0 context.Context, arg1 *authpb.LoginUserRequest) (*authpb.LoginUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*authpb.LoginUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthServiceServerMockRecorder) LoginUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthServiceServer)(nil).LoginUser), arg0, arg1)
}

// LogoutUser mocks base method.
func (m *MockAuthServiceServer) LogoutUser(arg0 context.Context, arg1 *authpb.LogoutUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockAuthServiceServerMockRecorder) LogoutUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAuthServiceServer)(nil).LogoutUser), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockAuthServiceServer) RegisterUser(arg0 context.Context, arg1 *authpb.RegisterUserRequest) (*authpb.RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(*authpb.RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthServiceServerMockRecorder) RegisterUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthServiceServer)(nil).RegisterUser), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockSessionServiceClient is a mock of SessionServiceClient interface.
type MockSessionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceClientMockRecorder
	isgomock struct{}
}

// MockSessionServiceClientMockRecorder is the mock recorder for MockSessionServiceClient.
type MockSessionServiceClientMockRecorder struct {
	mock *MockSessionServiceClient
}

// NewMockSessionServiceClient creates a new mock instance.
func NewMockSessionServiceClient(ctrl *gomock.Controller) *MockSessionServiceClient {
	mock := &MockSessionServiceClient{ctrl: ctrl}
	mock.recorder = &MockSessionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceClient) EXPECT() *MockSessionServiceClientMockRecorder {
	return m.recorder
}

// CheckLogin mocks base method.
func (m *MockSessionServiceClient) CheckLogin(ctx context.Context, in *authpb.CheckLoginRequest, opts ...grpc.CallOption) (*authpb.CheckLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckLogin", varargs...)
	ret0, _ := ret[0].(*authpb.CheckLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockSessionServiceClientMockRecorder) CheckLogin(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockSessionServiceClient)(nil).CheckLogin), varargs...)
}

// MockSessionServiceServer is a mock of SessionServiceServer interface.
type MockSessionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceServerMockRecorder
	isgomock struct{}
}

// MockSessionServiceServerMockRecorder is the mock recorder for MockSessionServiceServer.
type MockSessionServiceServerMockRecorder struct {
	mock *MockSessionServiceServer
}

// NewMockSessionServiceServer creates a new mock instance.
func NewMockSessionServiceServer(ctrl *gomock.Controller) *MockSessionServiceServer {
	mock := &MockSessionServiceServer{ctrl: ctrl}
	mock.recorder = &MockSessionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceServer) EXPECT() *MockSessionServiceServerMockRecorder {
	return m.recorder
}

// CheckLogin mocks base method.
func (m *MockSessionServiceServer) CheckLogin(arg0 context.Context, arg1 *authpb.CheckLoginRequest) (*authpb.CheckLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", arg0, arg1)
	ret0, _ := ret[0].(*authpb.CheckLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockSessionServiceServerMockRecorder) CheckLogin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockSessionServiceServer)(nil).CheckLogin), arg0, arg1)
}

// mustEmbedUnimplementedSessionServiceServer mocks base method.
func (m *MockSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSessionServiceServer")
}

// mustEmbedUnimplementedSessionServiceServer indicates an expected call of mustEmbedUnimplementedSessionServiceServer.
func (mr *MockSessionServiceServerMockRecorder) mustEmbedUnimplementedSessionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSessionServiceServer", reflect.TypeOf((*MockSessionServiceServer)(nil).mustEmbedUnimplementedSessionServiceServer))
}

// MockUnsafeSessionServiceServer is a mock of UnsafeSessionServiceServer interface.
type MockUnsafeSessionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSessionServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeSessionServiceServerMockRecorder is the mock recorder for MockUnsafeSessionServiceServer.
type MockUnsafeSessionServiceServerMockRecorder struct {
	mock *MockUnsafeSessionServiceServer
}

// NewMockUnsafeSessionServiceServer creates a new mock instance.
func NewMockUnsafeSessionServiceServer(ctrl *gomock.Controller) *MockUnsafeSessionServiceServer {
	mock := &MockUnsafeSessionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSessionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSessionServiceServer) EXPECT() *MockUnsafeSessionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSessionServiceServer mocks base method.
func (m *MockUnsafeSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSessionServiceServer")
}

// mustEmbedUnimplementedSessionServiceServer indicates an expected call of mustEmbedUnimplementedSessionServiceServer.
func (mr *MockUnsafeSessionServiceServerMockRecorder) mustEmbedUnimplementedSessionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSessionServiceServer", reflect.TypeOf((*MockUnsafeSessionServiceServer)(nil).mustEmbedUnimplementedSessionServiceServer))
}
