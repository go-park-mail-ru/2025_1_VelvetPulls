package mocks

import (
	"context"
	"testing"

	"github.com/go-park-mail-ru/2025_1_VelvetPulls/internal/usecase"
	"github.com/stretchr/testify/mock"
)

// ISessionUsecase is an autogenerated mock type for the ISessionUsecase type
type ISessionUsecase struct {
	mock.Mock
	t testing.TB
}

// NewISessionUsecase creates a new instance of ISessionUsecase. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewISessionUsecase(t testing.TB) *ISessionUsecase {
	mock := &ISessionUsecase{t: t}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CheckLogin provides a mock function with given fields: ctx, token
func (_m *ISessionUsecase) CheckLogin(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, userID
func (_m *ISessionUsecase) Create(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, token
func (_m *ISessionUsecase) Delete(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ensure ISessionUsecase implements usecase.ISessionUsecase
var _ usecase.ISessionUsecase = (*ISessionUsecase)(nil)
