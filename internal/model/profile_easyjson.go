// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson521a5691DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(in *jlexer.Lexer, out *UpdateUserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "username":
			if in.IsNull() {
				in.Skip()
				out.Username = nil
			} else {
				if out.Username == nil {
					out.Username = new(string)
				}
				*out.Username = string(in.String())
			}
		case "birth_date":
			if in.IsNull() {
				in.Skip()
				out.BirthDate = nil
			} else {
				if out.BirthDate == nil {
					out.BirthDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BirthDate).UnmarshalJSON(data))
				}
			}
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(out *jwriter.Writer, in UpdateUserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(*in.Name))
	}
	if in.Username != nil {
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(*in.Username))
	}
	if in.BirthDate != nil {
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.Raw((*in.BirthDate).MarshalJSON())
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateUserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateUserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateUserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateUserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(in *jlexer.Lexer, out *GetUserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "avatar_path":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		case "name":
			out.Name = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "birth_date":
			if in.IsNull() {
				in.Skip()
				out.BirthDate = nil
			} else {
				if out.BirthDate == nil {
					out.BirthDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BirthDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(out *jwriter.Writer, in GetUserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.AvatarPath != nil {
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(*in.AvatarPath))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.BirthDate != nil {
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.Raw((*in.BirthDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(l, v)
}
