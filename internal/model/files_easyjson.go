// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(in *jlexer.Lexer, out *UploadFileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(out *jwriter.Writer, in UploadFileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadFileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadFileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadFileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadFileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(l, v)
}
func easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(in *jlexer.Lexer, out *StickerPacks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "packs":
			if in.IsNull() {
				in.Skip()
				out.Packs = nil
			} else {
				in.Delim('[')
				if out.Packs == nil {
					if !in.IsDelim(']') {
						out.Packs = make([]StickerPack, 0, 1)
					} else {
						out.Packs = []StickerPack{}
					}
				} else {
					out.Packs = (out.Packs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 StickerPack
					(v1).UnmarshalEasyJSON(in)
					out.Packs = append(out.Packs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(out *jwriter.Writer, in StickerPacks) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"packs\":"
		out.RawString(prefix[1:])
		if in.Packs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Packs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerPacks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerPacks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerPacks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerPacks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(l, v)
}
func easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(in *jlexer.Lexer, out *StickerPack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			out.Photo = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PackID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(out *jwriter.Writer, in StickerPack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.RawText((in.PackID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerPack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerPack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerPack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerPack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(l, v)
}
func easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(in *jlexer.Lexer, out *Payload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "URL":
			out.URL = string(in.String())
		case "Filename":
			out.Filename = string(in.String())
		case "ContentType":
			out.ContentType = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(out *jwriter.Writer, in Payload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"Filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(l, v)
}
func easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(in *jlexer.Lexer, out *GetStickerPackResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			out.Photo = string(in.String())
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]string, 0, 4)
					} else {
						out.URLs = []string{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.URLs = append(out.URLs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(out *jwriter.Writer, in GetStickerPackResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		if in.URLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.URLs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPackResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPackResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPackResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPackResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(l, v)
}
func easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(in *jlexer.Lexer, out *FileMetaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Filename":
			out.Filename = string(in.String())
		case "ContentType":
			out.ContentType = string(in.String())
		case "FileSize":
			out.FileSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(out *jwriter.Writer, in FileMetaData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"FileSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.FileSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileMetaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileMetaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98fba7EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileMetaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileMetaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98fba7DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(l, v)
}
