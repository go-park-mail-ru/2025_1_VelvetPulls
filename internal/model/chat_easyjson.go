// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(in *jlexer.Lexer, out *UsersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(out *jwriter.Writer, in UsersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(in *jlexer.Lexer, out *UserInChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "username":
			out.Username = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "avatar_path":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				if out.Role == nil {
					out.Role = new(string)
				}
				*out.Role = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(out *jwriter.Writer, in UserInChat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(*in.Name))
	}
	if in.AvatarPath != nil {
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(*in.AvatarPath))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		if in.Role == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Role))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel1(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(in *jlexer.Lexer, out *UpdateChatResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "updated_avatar":
			out.Avatar = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(out *jwriter.Writer, in UpdateChatResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"updated_avatar\":"
		out.RawString(prefix[1:])
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateChatResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateChatResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateChatResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateChatResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel2(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(in *jlexer.Lexer, out *UpdateChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(out *jwriter.Writer, in UpdateChat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel3(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(in *jlexer.Lexer, out *DeletedUsersFromChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deleted_users":
			if in.IsNull() {
				in.Skip()
				out.DeletedUsers = nil
			} else {
				in.Delim('[')
				if out.DeletedUsers == nil {
					if !in.IsDelim(']') {
						out.DeletedUsers = make([]string, 0, 4)
					} else {
						out.DeletedUsers = []string{}
					}
				} else {
					out.DeletedUsers = (out.DeletedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.DeletedUsers = append(out.DeletedUsers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(out *jwriter.Writer, in DeletedUsersFromChat) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.DeletedUsers) != 0 {
		const prefix string = ",\"deleted_users\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.DeletedUsers {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeletedUsersFromChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeletedUsersFromChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeletedUsersFromChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeletedUsersFromChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel4(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(in *jlexer.Lexer, out *CreateChatRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "usersToAdd":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Users = append(out.Users, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(out *jwriter.Writer, in CreateChatRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"usersToAdd\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Users {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateChatRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateChatRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateChatRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateChatRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel5(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel6(in *jlexer.Lexer, out *CreateChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "usersToAdd":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Users = append(out.Users, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel6(out *jwriter.Writer, in CreateChat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"usersToAdd\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Users {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel6(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel7(in *jlexer.Lexer, out *ChatList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ChatList, 0, 0)
			} else {
				*out = ChatList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 Chat
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel7(out *jwriter.Writer, in ChatList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ChatList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel7(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel8(in *jlexer.Lexer, out *ChatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = string(in.String())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserInChat, 0, 1)
					} else {
						out.Users = []UserInChat{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v16 UserInChat
					(v16).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]Message, 0, 0)
					} else {
						out.Messages = []Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v17 Message
					(v17).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel8(out *jwriter.Writer, in ChatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix[1:])
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Users {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Messages {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel8(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel9(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "avatar_path":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		case "type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "last_message":
			if in.IsNull() {
				in.Skip()
				out.LastMessage = nil
			} else {
				if out.LastMessage == nil {
					out.LastMessage = new(LastMessage)
				}
				(*out.LastMessage).UnmarshalEasyJSON(in)
			}
		case "count_users":
			out.CountUsers = int(in.Int())
		case "send_notifications":
			out.SendNotifications = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel9(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.AvatarPath != nil {
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(*in.AvatarPath))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.LastMessage != nil {
		const prefix string = ",\"last_message\":"
		out.RawString(prefix)
		(*in.LastMessage).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"count_users\":"
		out.RawString(prefix)
		out.Int(int(in.CountUsers))
	}
	{
		const prefix string = ",\"send_notifications\":"
		out.RawString(prefix)
		out.Bool(bool(in.SendNotifications))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel9(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel10(in *jlexer.Lexer, out *AddedUsersIntoChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "added_users":
			if in.IsNull() {
				in.Skip()
				out.AddedUsers = nil
			} else {
				in.Delim('[')
				if out.AddedUsers == nil {
					if !in.IsDelim(']') {
						out.AddedUsers = make([]string, 0, 4)
					} else {
						out.AddedUsers = []string{}
					}
				} else {
					out.AddedUsers = (out.AddedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.AddedUsers = append(out.AddedUsers, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "not_added_users":
			if in.IsNull() {
				in.Skip()
				out.NotAddedUsers = nil
			} else {
				in.Delim('[')
				if out.NotAddedUsers == nil {
					if !in.IsDelim(']') {
						out.NotAddedUsers = make([]string, 0, 4)
					} else {
						out.NotAddedUsers = []string{}
					}
				} else {
					out.NotAddedUsers = (out.NotAddedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.NotAddedUsers = append(out.NotAddedUsers, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel10(out *jwriter.Writer, in AddedUsersIntoChat) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AddedUsers) != 0 {
		const prefix string = ",\"added_users\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v24, v25 := range in.AddedUsers {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.NotAddedUsers) != 0 {
		const prefix string = ",\"not_added_users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.NotAddedUsers {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddedUsersIntoChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddedUsersIntoChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20251VelvetPullsInternalModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddedUsersIntoChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddedUsersIntoChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20251VelvetPullsInternalModel10(l, v)
}
